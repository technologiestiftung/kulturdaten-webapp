/* tslint:disable */
/* eslint-disable */
/**
 * API Kulturdaten.Berlin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganizationsIdentifierGet404Response,
  OrganizationsPost201Response,
  UsersGet200Response,
  UsersIdentifierGet200Response,
  UsersIdentifierPatchRequest,
  UsersPostRequest,
} from '../models';
import {
    OrganizationsIdentifierGet404ResponseFromJSON,
    OrganizationsIdentifierGet404ResponseToJSON,
    OrganizationsPost201ResponseFromJSON,
    OrganizationsPost201ResponseToJSON,
    UsersGet200ResponseFromJSON,
    UsersGet200ResponseToJSON,
    UsersIdentifierGet200ResponseFromJSON,
    UsersIdentifierGet200ResponseToJSON,
    UsersIdentifierPatchRequestFromJSON,
    UsersIdentifierPatchRequestToJSON,
    UsersPostRequestFromJSON,
    UsersPostRequestToJSON,
} from '../models';

export interface UsersIdentifierDeleteRequest {
    identifier: string;
}

export interface UsersIdentifierGetRequest {
    identifier: string;
}

export interface UsersIdentifierPatchOperationRequest {
    identifier: string;
    usersIdentifierPatchRequest?: UsersIdentifierPatchRequest;
}

export interface UsersPostOperationRequest {
    usersPostRequest?: UsersPostRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersGet200Response> {
        const response = await this.usersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersIdentifierDeleteRaw(requestParameters: UsersIdentifierDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling usersIdentifierDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersIdentifierDelete(requestParameters: UsersIdentifierDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersIdentifierDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersIdentifierGetRaw(requestParameters: UsersIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdentifierGet200Response>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling usersIdentifierGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersIdentifierGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersIdentifierGet(requestParameters: UsersIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdentifierGet200Response> {
        const response = await this.usersIdentifierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersIdentifierPatchRaw(requestParameters: UsersIdentifierPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling usersIdentifierPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UsersIdentifierPatchRequestToJSON(requestParameters.usersIdentifierPatchRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersIdentifierPatch(requestParameters: UsersIdentifierPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersIdentifierPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersPostRaw(requestParameters: UsersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationsPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersPostRequestToJSON(requestParameters.usersPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersPost(requestParameters: UsersPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationsPost201Response> {
        const response = await this.usersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
