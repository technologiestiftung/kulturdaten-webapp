/* tslint:disable */
/* eslint-disable */
/**
 * API Kulturdaten.Berlin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganizationsGet200Response,
  OrganizationsIdentifierGet200Response,
  OrganizationsIdentifierGet404Response,
  OrganizationsIdentifierPatchRequest,
  OrganizationsPost201Response,
  OrganizationsPostRequest,
} from '../models';
import {
    OrganizationsGet200ResponseFromJSON,
    OrganizationsGet200ResponseToJSON,
    OrganizationsIdentifierGet200ResponseFromJSON,
    OrganizationsIdentifierGet200ResponseToJSON,
    OrganizationsIdentifierGet404ResponseFromJSON,
    OrganizationsIdentifierGet404ResponseToJSON,
    OrganizationsIdentifierPatchRequestFromJSON,
    OrganizationsIdentifierPatchRequestToJSON,
    OrganizationsPost201ResponseFromJSON,
    OrganizationsPost201ResponseToJSON,
    OrganizationsPostRequestFromJSON,
    OrganizationsPostRequestToJSON,
} from '../models';

export interface OrganizationsIdentifierDeleteRequest {
    identifier: string;
}

export interface OrganizationsIdentifierGetRequest {
    identifier: string;
}

export interface OrganizationsIdentifierPatchOperationRequest {
    identifier: string;
    organizationsIdentifierPatchRequest?: OrganizationsIdentifierPatchRequest;
}

export interface OrganizationsPostOperationRequest {
    organizationsPostRequest?: OrganizationsPostRequest;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     */
    async organizationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async organizationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationsGet200Response> {
        const response = await this.organizationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationsIdentifierDeleteRaw(requestParameters: OrganizationsIdentifierDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling organizationsIdentifierDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationsIdentifierDelete(requestParameters: OrganizationsIdentifierDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationsIdentifierDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationsIdentifierGetRaw(requestParameters: OrganizationsIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationsIdentifierGet200Response>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling organizationsIdentifierGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsIdentifierGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async organizationsIdentifierGet(requestParameters: OrganizationsIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationsIdentifierGet200Response> {
        const response = await this.organizationsIdentifierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationsIdentifierPatchRaw(requestParameters: OrganizationsIdentifierPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling organizationsIdentifierPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizations/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationsIdentifierPatchRequestToJSON(requestParameters.organizationsIdentifierPatchRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationsIdentifierPatch(requestParameters: OrganizationsIdentifierPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationsIdentifierPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationsPostRaw(requestParameters: OrganizationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationsPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationsPostRequestToJSON(requestParameters.organizationsPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsPost201ResponseFromJSON(jsonValue));
    }

    /**
     */
    async organizationsPost(requestParameters: OrganizationsPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationsPost201Response> {
        const response = await this.organizationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
